// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GeneratePropsKotlinDelegate can generate fixture ARRAY_PROPS 1`] = `
Map {
  "ArrayPropsNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ArrayPropsNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ArrayPropsNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"names\\" ->
        mViewManager.setNames(view, value as ReadableArray);
      \\"disableds\\" ->
        mViewManager.setDisableds(view, value as ReadableArray);
      \\"progress\\" ->
        mViewManager.setProgress(view, value as ReadableArray);
      \\"radii\\" ->
        mViewManager.setRadii(view, value as ReadableArray);
      \\"colors\\" ->
        mViewManager.setColors(view, value as ReadableArray);
      \\"srcs\\" ->
        mViewManager.setSrcs(view, value as ReadableArray);
      \\"points\\" ->
        mViewManager.setPoints(view, value as ReadableArray);
      \\"sizes\\" ->
        mViewManager.setSizes(view, value as ReadableArray);
      \\"object\\" ->
        mViewManager.setObject(view, value as ReadableArray);
      \\"array\\" ->
        mViewManager.setArray(view, value as ReadableArray);
      \\"arrayOfArrayOfObject\\" ->
        mViewManager.setArrayOfArrayOfObject(view, value as ReadableArray);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
Map {
  "ArrayPropsNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ArrayPropsNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ArrayPropsNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"nativePrimitives\\" ->
        mViewManager.setNativePrimitives(view, value as ReadableArray);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture BOOLEAN_PROP 1`] = `
Map {
  "BooleanPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class BooleanPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : BooleanPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) false else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture COLOR_PROP 1`] = `
Map {
  "ColorPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ColorPropConverter;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ColorPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ColorPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"tintColor\\" ->
        mViewManager.setTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture COMMANDS 1`] = `
Map {
  "CommandNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class CommandNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : CommandNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    super.setProperty(view, propName, value);
  }

  public override fun receiveCommand(view: T, commandName: String, args: ReadableArray) {
    when(commandName) {
      \\"flashScrollIndicators\\" ->
        mViewManager.flashScrollIndicators(view);
      \\"allTypes\\" ->
        mViewManager.allTypes(view, args.getInt(0), (float) args.getDouble(1), args.getDouble(2), args.getString(3), args.getBoolean(4));
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture COMMANDS_AND_PROPS 1`] = `
Map {
  "CommandNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class CommandNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : CommandNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"accessibilityHint\\" ->
        mViewManager.setAccessibilityHint(view, if(value == null) \\"\\" else value as String);
      else ->
        super.setProperty(view, propName, value);
    }
  }

  public override fun receiveCommand(view: T, commandName: String, args: ReadableArray) {
    when(commandName) {
      \\"handleRootTag\\" ->
        mViewManager.handleRootTag(view, args.getDouble(0));
      \\"hotspotUpdate\\" ->
        mViewManager.hotspotUpdate(view, args.getInt(0), args.getInt(1));
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture DOUBLE_PROPS 1`] = `
Map {
  "DoublePropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class DoublePropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : DoublePropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"blurRadius\\" ->
        mViewManager.setBlurRadius(view, if(value == null) Double.NaN else (value as Double).toDouble());
      \\"blurRadius2\\" ->
        mViewManager.setBlurRadius2(view, if(value == null) 0.001f else (value as Double).toDouble());
      \\"blurRadius3\\" ->
        mViewManager.setBlurRadius3(view, if(value == null) 2.1f else (value as Double).toDouble());
      \\"blurRadius4\\" ->
        mViewManager.setBlurRadius4(view, if(value == null) 0f else (value as Double).toDouble());
      \\"blurRadius5\\" ->
        mViewManager.setBlurRadius5(view, if(value == null) 1f else (value as Double).toDouble());
      \\"blurRadius6\\" ->
        mViewManager.setBlurRadius6(view, if(value == null) 0f else (value as Double).toDouble());
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
Map {
  "EventsNestedObjectNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class EventsNestedObjectNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : EventsNestedObjectNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) false else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture EVENT_PROPS 1`] = `
Map {
  "EventsNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class EventsNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : EventsNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) false else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
Map {
  "InterfaceOnlyComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class InterfaceOnlyComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : InterfaceOnlyComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    super.setProperty(view, propName, value);
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture EXCLUDE_ANDROID 1`] = `Map {}`;

exports[`GeneratePropsKotlinDelegate can generate fixture EXCLUDE_ANDROID_IOS 1`] = `Map {}`;

exports[`GeneratePropsKotlinDelegate can generate fixture FLOAT_PROPS 1`] = `
Map {
  "FloatPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class FloatPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : FloatPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"blurRadius\\" ->
        mViewManager.setBlurRadius(view, if(value == null) Float.NaN else (value as Double).toFloat());
      \\"blurRadius2\\" ->
        mViewManager.setBlurRadius2(view, if(value == null) 0.001f else (value as Double).toFloat());
      \\"blurRadius3\\" ->
        mViewManager.setBlurRadius3(view, if(value == null) 2.1f else (value as Double).toFloat());
      \\"blurRadius4\\" ->
        mViewManager.setBlurRadius4(view, if(value == null) 0f else (value as Double).toFloat());
      \\"blurRadius5\\" ->
        mViewManager.setBlurRadius5(view, if(value == null) 1f else (value as Double).toFloat());
      \\"blurRadius6\\" ->
        mViewManager.setBlurRadius6(view, if(value == null) 0f else (value as Double).toFloat());
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture IMAGE_PROP 1`] = `
Map {
  "ImagePropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ImagePropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ImagePropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"thumbImage\\" ->
        mViewManager.setThumbImage(view, value as ReadableMap);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture INSETS_PROP 1`] = `
Map {
  "InsetsPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class InsetsPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : InsetsPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"contentInset\\" ->
        mViewManager.setContentInset(view, value as ReadableMap);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture INT32_ENUM_PROP 1`] = `
Map {
  "Int32EnumPropsNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class Int32EnumPropsNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : Int32EnumPropsNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"maxInterval\\" ->
        mViewManager.setMaxInterval(view, if(value == null) 0 : ((Double) value).intValue());
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture INTEGER_PROPS 1`] = `
Map {
  "IntegerPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class IntegerPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : IntegerPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"progress1\\" ->
        mViewManager.setProgress1(view, if(value == null) 0 else (value as Double).toInt());
      \\"progress2\\" ->
        mViewManager.setProgress2(view, if(value == null) -1 else (value as Double).toInt());
      \\"progress3\\" ->
        mViewManager.setProgress3(view, if(value == null) 10 else (value as Double).toInt());
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture INTERFACE_ONLY 1`] = `
Map {
  "InterfaceOnlyComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class InterfaceOnlyComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : InterfaceOnlyComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"accessibilityHint\\" ->
        mViewManager.setAccessibilityHint(view, if(value == null) \\"\\" else value as String);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture MULTI_NATIVE_PROP 1`] = `
Map {
  "ImageColorPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ColorPropConverter;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ImageColorPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ImageColorPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"thumbImage\\" ->
        mViewManager.setThumbImage(view, value as ReadableMap);
      \\"color\\" ->
        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
      \\"thumbTintColor\\" ->
        mViewManager.setThumbTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
      \\"point\\" ->
        mViewManager.setPoint(view, value as ReadableMape);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture NO_PROPS_NO_EVENTS 1`] = `
Map {
  "NoPropsNoEventsComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class NoPropsNoEventsComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : NoPropsNoEventsComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    super.setProperty(view, propName, value);
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture OBJECT_PROPS 1`] = `
Map {
  "ObjectPropsManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class ObjectPropsManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : ObjectPropsManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"objectProp\\" ->
        mViewManager.setObjectProp(view, value as ReadableMap);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture POINT_PROP 1`] = `
Map {
  "PointPropNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class PointPropNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : PointPropNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"startPoint\\" ->
        mViewManager.setStartPoint(view, value as ReadableMape);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture STRING_ENUM_PROP 1`] = `
Map {
  "StringEnumPropsNativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class StringEnumPropsNativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : StringEnumPropsNativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"alignment\\" ->
        mViewManager.setAlignment(view, value as String);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture STRING_PROP 1`] = `
Map {
  "StringPropComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class StringPropComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : StringPropComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"accessibilityHint\\" ->
        mViewManager.setAccessibilityHint(view, if(value == null) \\"\\" else value as String);
      \\"accessibilityRole\\" ->
        mViewManager.setAccessibilityRole(view, if(value == null) null else value as String);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
Map {
  "MultiFile1NativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class MultiFile1NativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : MultiFile1NativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) false else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
  "MultiFile2NativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class MultiFile2NativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : MultiFile2NativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) true else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;

exports[`GeneratePropsKotlinDelegate can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
Map {
  "MultiComponent1NativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class MultiComponent1NativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : MultiComponent1NativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) false else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
  "MultiComponent2NativeComponentManagerDelegate.kt" => "/**
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*
* @generated by codegen project: GeneratePropsKotlinDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;
import com.facebook.react.uimanager.LayoutShadowNode;

public class MultiComponent2NativeComponentManagerDelegate<T : View, U>(viewManager: U) : BaseViewManagerDelegate<T, U>(viewManager) where U : BaseViewManagerInterface<T>, U : MultiComponent2NativeComponentManagerInterface<T>{
  public override fun setProperty(view: T, propName: String, value: Any?) {
    when(propName) {
      \\"disabled\\" ->
        mViewManager.setDisabled(view, if(value == null) true else value  as Boolean);
      else ->
        super.setProperty(view, propName, value);
    }
  }
}
",
}
`;
