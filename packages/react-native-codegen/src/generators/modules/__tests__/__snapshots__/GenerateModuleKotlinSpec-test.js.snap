// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GenerateModuleKotlinSpec can generate fixture COMPLEX_OBJECTS 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeSampleTurboModuleSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun difficult(A: ReadableMap):WritableMap;

  @ReactMethod
  public abstract fun optionals(A: ReadableMap);

  @ReactMethod
  public abstract fun optionalMethod(options: ReadableMap, callback: Callback, extras: ReadableMap?);

  @ReactMethod
  public abstract fun getArrays(options: ReadableMap);
}
",
}
`;

exports[`GenerateModuleKotlinSpec can generate fixture EMPTY_NATIVE_MODULES 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeSampleTurboModuleSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {

}
",
}
`;

exports[`GenerateModuleKotlinSpec can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/AliasTurboModuleSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class AliasTurboModuleSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod
  public abstract fun cropImage(cropData: ReadableMap);
}
",
}
`;

exports[`GenerateModuleKotlinSpec can generate fixture REAL_MODULE_EXAMPLE 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/NativeCameraRollManagerSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeCameraRollManagerSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod
  public abstract fun getPhotos(params: ReadableMap, promise: Promise);

  @ReactMethod
  public abstract fun saveToCameraRoll(uri: String, type: String, promise: Promise);

  @ReactMethod
  public abstract fun deletePhotos(assets: ReadableMap, promise: Promise);
}
",
  "kotlin/com/facebook/fbreact/specs/NativeExceptionsManagerSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeExceptionsManagerSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod
  public abstract fun reportFatalException(message: String, stack: ReadableMap, exceptionId: Double);

  @ReactMethod
  public abstract fun reportSoftException(message: String, stack: ReadableMap, exceptionId: Double);

  @ReactMethod
  public abstract fun reportException(data: ReadableMap);

  @ReactMethod
  public abstract fun updateExceptionMessage(message: String, stack: ReadableMap, exceptionId: Double);

  @ReactMethod
  public abstract fun dismissRedbox();
}
",
}
`;

exports[`GenerateModuleKotlinSpec can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.build.ReactBuildConfig;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeSampleTurboModuleSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  protected abstract fun getTypedExportedConstants(): Map<String, Any>;

  override fun getConstants():Map<String, Any>{
    val constants = getTypedExportedConstants();
    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
      val obligatoryFlowConstants =  HashSet<String>(listOf(
          \\"const1\\",
          \\"const2\\",
          \\"const3\\"
      ))
      val optionalFlowConstants =  HashSet<String>()
      var undeclaredConstants =  HashSet<String>(constants.keys);
      undeclaredConstants.removeAll(obligatoryFlowConstants);
      undeclaredConstants.removeAll(optionalFlowConstants);
      if (undeclaredConstants.isNotEmpty()) {
        throw IllegalStateException(String.format(\\"Native Module Flow doesn't declare constants: %s\\", undeclaredConstants));
      }
      undeclaredConstants = obligatoryFlowConstants;
      undeclaredConstants.removeAll(constants.keys);
      if (undeclaredConstants.isNotEmpty()) {
        throw IllegalStateException(String.format(\\"Native Module doesn't fill in constants: %s\\", undeclaredConstants));
      }
    }
    return constants
  }

  @ReactMethod
  public abstract fun voidFunc();

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getBool(arg: Boolean):Boolean;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getNumber(arg: Double):Double;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getString(arg: String):String;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getArray(arg: ReadableMap):WritableMap;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getObject(arg: ReadableMap):WritableMap;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getRootTag(arg: Double):Double;

  @ReactMethod(isBlockingSynchronousMethod = true)
  public abstract fun getValue(x: Double, y: String, z: ReadableMap):WritableMap;

  @ReactMethod
  public abstract fun getValueWithCallback(callback: Callback);

  @ReactMethod
  public abstract fun getValueWithPromise(error: Boolean, promise: Promise);
}
",
}
`;

exports[`GenerateModuleKotlinSpec can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
Map {
  "kotlin/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeSampleTurboModuleSpec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod
  public abstract fun voidFunc();
}
",
  "kotlin/com/facebook/fbreact/specs/NativeSampleTurboModule2Spec.kt" => "
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE file in the root
 * directory of this source tree.
 *
 * @generated by codegen project: GenerateModuleKotlinSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;

public abstract class NativeSampleTurboModule2Spec(reactContext:ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext!!), ReactModuleWithSpec, TurboModule {
  @ReactMethod
  public abstract fun voidFunc();
}
",
}
`;
